<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Account', 'accounts');

/**
 * BaseAccount
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $pseudo
 * @property string $password
 * @property string $mail
 * @property string $question
 * @property string $reponse
 * @property integer $gmlevel
 * @property integer $banned
 * @property integer $points
 * @property integer $timestamp
 * @property Doctrine_Collection $Articles
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Ranks
 * @property Contact $Contact
 * @property Doctrine_Collection $Votes
 * @property Doctrine_Collection $TicketAnswer
 * @property Doctrine_Collection $GiftAccount
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method string              getUsername()     Returns the current record's "username" value
 * @method string              getPseudo()       Returns the current record's "pseudo" value
 * @method string              getPassword()     Returns the current record's "password" value
 * @method string              getMail()         Returns the current record's "mail" value
 * @method string              getQuestion()     Returns the current record's "question" value
 * @method string              getReponse()      Returns the current record's "reponse" value
 * @method integer             getGmlevel()      Returns the current record's "gmlevel" value
 * @method integer             getBanned()       Returns the current record's "banned" value
 * @method integer             getPoints()       Returns the current record's "points" value
 * @method integer             getTimestamp()    Returns the current record's "timestamp" value
 * @method Doctrine_Collection getArticles()     Returns the current record's "Articles" collection
 * @method Doctrine_Collection getComments()     Returns the current record's "Comments" collection
 * @method Doctrine_Collection getRanks()        Returns the current record's "Ranks" collection
 * @method Contact             getContact()      Returns the current record's "Contact" value
 * @method Doctrine_Collection getVotes()        Returns the current record's "Votes" collection
 * @method Doctrine_Collection getTicketAnswer() Returns the current record's "TicketAnswer" collection
 * @method Doctrine_Collection getGiftAccount()  Returns the current record's "GiftAccount" collection
 * @method Account             setId()           Sets the current record's "id" value
 * @method Account             setUsername()     Sets the current record's "username" value
 * @method Account             setPseudo()       Sets the current record's "pseudo" value
 * @method Account             setPassword()     Sets the current record's "password" value
 * @method Account             setMail()         Sets the current record's "mail" value
 * @method Account             setQuestion()     Sets the current record's "question" value
 * @method Account             setReponse()      Sets the current record's "reponse" value
 * @method Account             setGmlevel()      Sets the current record's "gmlevel" value
 * @method Account             setBanned()       Sets the current record's "banned" value
 * @method Account             setPoints()       Sets the current record's "points" value
 * @method Account             setTimestamp()    Sets the current record's "timestamp" value
 * @method Account             setArticles()     Sets the current record's "Articles" collection
 * @method Account             setComments()     Sets the current record's "Comments" collection
 * @method Account             setRanks()        Sets the current record's "Ranks" collection
 * @method Account             setContact()      Sets the current record's "Contact" value
 * @method Account             setVotes()        Sets the current record's "Votes" collection
 * @method Account             setTicketAnswer() Sets the current record's "TicketAnswer" collection
 * @method Account             setGiftAccount()  Sets the current record's "GiftAccount" collection
 * 
 * @package    DGuardCMS
 * @subpackage model
 * @author     Andaeriel
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAccount extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('player_accounts');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('pseudo', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('mail', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('question', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('reponse', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('gmlevel', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('banned', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('points', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('timestamp', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Article as Articles', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('Rank as Ranks', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasOne('Contact', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('PollAccount as Votes', array(
             'local' => 'id',
             'foreign' => 'account_id'));

        $this->hasMany('TicketAnswer', array(
             'local' => 'id',
             'foreign' => 'author_id'));

        $this->hasMany('GiftAccount', array(
             'local' => 'id',
             'foreign' => 'account_id'));
    }
}