<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Map', 'others');

/**
 * BaseMap
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $width
 * @property integer $height
 * @property string $mapdata
 * @property string $decryptkey
 * @property string $createtime
 * @property string $monsters
 * @property integer $maximummonster
 * @property integer $maximumgroup
 * @property Dungeon $Dungeon
 * @property Doctrine_Collection $NPCs
 * @property Doctrine_Collection $Triggers
 * @property Zaap $Zaap
 * @property Zaapi $Zaapi
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method integer             getWidth()          Returns the current record's "width" value
 * @method integer             getHeight()         Returns the current record's "height" value
 * @method string              getMapdata()        Returns the current record's "mapdata" value
 * @method string              getDecryptkey()     Returns the current record's "decryptkey" value
 * @method string              getCreatetime()     Returns the current record's "createtime" value
 * @method string              getMonsters()       Returns the current record's "monsters" value
 * @method integer             getMaximummonster() Returns the current record's "maximummonster" value
 * @method integer             getMaximumgroup()   Returns the current record's "maximumgroup" value
 * @method Dungeon             getDungeon()        Returns the current record's "Dungeon" value
 * @method Doctrine_Collection getNPCs()           Returns the current record's "NPCs" collection
 * @method Doctrine_Collection getTriggers()       Returns the current record's "Triggers" collection
 * @method Zaap                getZaap()           Returns the current record's "Zaap" value
 * @method Zaapi               getZaapi()          Returns the current record's "Zaapi" value
 * @method Map                 setId()             Sets the current record's "id" value
 * @method Map                 setWidth()          Sets the current record's "width" value
 * @method Map                 setHeight()         Sets the current record's "height" value
 * @method Map                 setMapdata()        Sets the current record's "mapdata" value
 * @method Map                 setDecryptkey()     Sets the current record's "decryptkey" value
 * @method Map                 setCreatetime()     Sets the current record's "createtime" value
 * @method Map                 setMonsters()       Sets the current record's "monsters" value
 * @method Map                 setMaximummonster() Sets the current record's "maximummonster" value
 * @method Map                 setMaximumgroup()   Sets the current record's "maximumgroup" value
 * @method Map                 setDungeon()        Sets the current record's "Dungeon" value
 * @method Map                 setNPCs()           Sets the current record's "NPCs" collection
 * @method Map                 setTriggers()       Sets the current record's "Triggers" collection
 * @method Map                 setZaap()           Sets the current record's "Zaap" value
 * @method Map                 setZaapi()          Sets the current record's "Zaapi" value
 * 
 * @package    DGuardCMS
 * @subpackage model
 * @author     Andaeriel
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMap extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('maps_data');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('width', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('height', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('mapdata', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('decryptkey', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('createtime', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('monsters', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('maximummonster', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('maximumgroup', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Dungeon', array(
             'local' => 'id',
             'foreign' => 'mapid'));

        $this->hasMany('NpcMap as NPCs', array(
             'local' => 'id',
             'foreign' => 'mapid'));

        $this->hasMany('MapTrigger as Triggers', array(
             'local' => 'id',
             'foreign' => 'mapid'));

        $this->hasOne('Zaap', array(
             'local' => 'id',
             'foreign' => 'mapid'));

        $this->hasOne('Zaapi', array(
             'local' => 'id',
             'foreign' => 'mapid'));
    }
}