<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Npc', 'others');

/**
 * BaseNpc
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $gfx
 * @property integer $size
 * @property integer $sex
 * @property integer $color1
 * @property integer $color2
 * @property integer $color3
 * @property string $items
 * @property integer $artwork
 * @property integer $bonus
 * @property string $sellinglist
 * @property Doctrine_Collection $Maps
 * @property Doctrine_Collection $Questions
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method integer             getGfx()         Returns the current record's "gfx" value
 * @method integer             getSize()        Returns the current record's "size" value
 * @method integer             getSex()         Returns the current record's "sex" value
 * @method integer             getColor1()      Returns the current record's "color1" value
 * @method integer             getColor2()      Returns the current record's "color2" value
 * @method integer             getColor3()      Returns the current record's "color3" value
 * @method string              getItems()       Returns the current record's "items" value
 * @method integer             getArtwork()     Returns the current record's "artwork" value
 * @method integer             getBonus()       Returns the current record's "bonus" value
 * @method string              getSellinglist() Returns the current record's "sellinglist" value
 * @method Doctrine_Collection getMaps()        Returns the current record's "Maps" collection
 * @method Doctrine_Collection getQuestions()   Returns the current record's "Questions" collection
 * @method Npc                 setId()          Sets the current record's "id" value
 * @method Npc                 setName()        Sets the current record's "name" value
 * @method Npc                 setGfx()         Sets the current record's "gfx" value
 * @method Npc                 setSize()        Sets the current record's "size" value
 * @method Npc                 setSex()         Sets the current record's "sex" value
 * @method Npc                 setColor1()      Sets the current record's "color1" value
 * @method Npc                 setColor2()      Sets the current record's "color2" value
 * @method Npc                 setColor3()      Sets the current record's "color3" value
 * @method Npc                 setItems()       Sets the current record's "items" value
 * @method Npc                 setArtwork()     Sets the current record's "artwork" value
 * @method Npc                 setBonus()       Sets the current record's "bonus" value
 * @method Npc                 setSellinglist() Sets the current record's "sellinglist" value
 * @method Npc                 setMaps()        Sets the current record's "Maps" collection
 * @method Npc                 setQuestions()   Sets the current record's "Questions" collection
 * 
 * @package    DGuardCMS
 * @subpackage model
 * @author     Andaeriel
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseNpc extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('npcs_templates');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('gfx', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('size', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('sex', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('color1', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('color2', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('color3', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('items', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('artwork', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('bonus', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('sellinglist', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('NpcMap as Maps', array(
             'local' => 'id',
             'foreign' => 'templateid'));

        $this->hasMany('NpcQuestion as Questions', array(
             'local' => 'id',
             'foreign' => 'npcid'));
    }
}